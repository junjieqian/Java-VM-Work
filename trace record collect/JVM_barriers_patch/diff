diff -ruNa jikesrvm/MMTk/src/org/mmtk/plan/marksweep/MSConstraints.java jikesrvm-3.1.3/MMTk/src/org/mmtk/plan/marksweep/MSConstraints.java
--- jikesrvm/MMTk/src/org/mmtk/plan/marksweep/MSConstraints.java	2013-02-15 00:54:39.793949976 -0600
+++ jikesrvm-3.1.3/MMTk/src/org/mmtk/plan/marksweep/MSConstraints.java	2013-02-15 00:52:38.204355760 -0600
@@ -35,4 +35,12 @@
   public int maxNonLOSDefaultAllocBytes() { return SegregatedFreeListSpace.MAX_FREELIST_OBJECT_BYTES; }
   @Override
   public int numSpecializedScans() { return 1; }
+
+  /* Barriers implementation
+   * Junjie Qian
+   */
+  @Override
+  public boolean needsObjectReferenceReadBarrier() { return true; }
+  @Override
+  public boolean needsObjectReferenceWriteBarrier() { return true; }
 }
diff -ruNa jikesrvm/MMTk/src/org/mmtk/plan/marksweep/MSMutator.java jikesrvm-3.1.3/MMTk/src/org/mmtk/plan/marksweep/MSMutator.java
--- jikesrvm/MMTk/src/org/mmtk/plan/marksweep/MSMutator.java	2013-02-15 00:54:39.793949976 -0600
+++ jikesrvm-3.1.3/MMTk/src/org/mmtk/plan/marksweep/MSMutator.java	2013-02-15 00:52:38.208355812 -0600
@@ -20,6 +20,9 @@
 import org.vmmagic.pragma.*;
 import org.vmmagic.unboxed.*;
 
+// Junjie Qian
+import org.mmtk.vm.VM;
+
 /**
  * This class implements <i>per-mutator thread</i> behavior
  * and state for the <i>MS</i> plan, which implements a full-heap
@@ -88,6 +91,28 @@
     return super.getAllocatorFromSpace(space);
   }
 
+  /***************************************************************************
+   * Barriers implementation
+   * Junjie Qian
+   */
+  @Override
+  @Inline
+  public ObjectReference objectReferenceRead(ObjectReference src, Address slot, Word metaDataA, Word metaDataB, int mode) {
+    return VM.barriers.objectReferenceRead(src, metaDataA, metaDataB, mode);
+  }
+
+  @Override
+  @Inline
+  public void objectReferenceWrite(ObjectReference src, Address slot, ObjectReference tgt, Word metaDataA, Word metaDataB, int mode) {
+    VM.barriers.objectReferenceWrite(src, tgt, metaDataA, metaDataB, mode);
+  }
+
+  @Override
+  @Inline
+  public boolean objectReferenceTryCompareAndSwap(ObjectReference src, Address slot, ObjectReference old, ObjectReference tgt, Word metaDataA, Word metaDataB, int mode) {
+    return VM.barriers.objectReferenceTryCompareAndSwap(src, old, tgt, metaDataA, metaDataB, mode);
+  }
+
 
   /****************************************************************************
    * Collection
diff -ruNa jikesrvm/rvm/src/org/jikesrvm/mm/mminterface/Barriers.java jikesrvm-3.1.3/rvm/src/org/jikesrvm/mm/mminterface/Barriers.java
--- jikesrvm/rvm/src/org/jikesrvm/mm/mminterface/Barriers.java	2013-02-15 00:55:06.690302773 -0600
+++ jikesrvm-3.1.3/rvm/src/org/jikesrvm/mm/mminterface/Barriers.java	2013-02-15 00:53:05.004707058 -0600
@@ -24,6 +24,8 @@
 import org.vmmagic.unboxed.Offset;
 import org.vmmagic.unboxed.Word;
 
+import org.vmmagic.pragma.*;
+
 @Uninterruptible
 public class Barriers implements org.mmtk.utility.Constants {
   /** {@code true} if the selected plan requires a read barrier on java.lang.ref.Reference types */
@@ -1226,11 +1228,27 @@
   public static void objectFieldWrite(Object ref, Object value, Offset offset, int locationMetadata) {
     if (NEEDS_OBJECT_GC_WRITE_BARRIER) {
       ObjectReference src = ObjectReference.fromObject(ref);
+
+      // Junjie Qian
+      dowritebarrier(src);
+
       Selected.Mutator.get().objectReferenceWrite(src, src.toAddress().plus(offset), ObjectReference.fromObject(value), offset.toWord(), Word.fromIntZeroExtend(locationMetadata), INSTANCE_FIELD);
     } else if (VM.VerifyAssertions)
       VM._assert(VM.NOT_REACHED);
   }
 
+  /* write barrier implementation
+   * Junjie Qian
+   */
+  @NoInline
+  private static void dowritebarrier(ObjectReference src) {
+//          VM.sysWrite(System.currentTimeMillis());
+//          VM.sysWrite(1);
+//          VM.sysWriteln(src);
+//          VM.writesyswriteln(src);
+          VM.barriersyswriteln(1, src);
+  }
+
   /**
    * Barrier for writes of objects into arrays (i.e. aastore).
    *
@@ -1264,12 +1282,29 @@
   public static Object objectFieldRead(Object ref, Offset offset, int locationMetadata) {
     if (NEEDS_OBJECT_GC_READ_BARRIER) {
       ObjectReference src = ObjectReference.fromObject(ref);
+
+      // Junjie Qian
+      doreadbarrier(src);
+
       return Selected.Mutator.get().objectReferenceRead(src, src.toAddress().plus(offset), offset.toWord(), Word.fromIntZeroExtend(locationMetadata), INSTANCE_FIELD).toObject();
     } else if (VM.VerifyAssertions)
       VM._assert(VM.NOT_REACHED);
     return null;
   }
 
+  /* read barrier implementation
+   * Junjie Qian
+   */
+  @NoInline
+  private static void doreadbarrier(ObjectReference src) {
+//          VM.sysWrite(System.currentTimeMillis());
+//          VM.sysWrite(0);
+//          VM.sysWriteln(src);
+//          VM.readsyswriteln(src);
+          VM.barriersyswriteln(0, src);
+  }
+
+
   /**
    * Barrier for loads of objects from fields of arrays (i.e. aaload).
    *
diff -ruNa jikesrvm/rvm/src/org/jikesrvm/VM.java jikesrvm-3.1.3/rvm/src/org/jikesrvm/VM.java
--- jikesrvm/rvm/src/org/jikesrvm/VM.java	2013-02-15 00:55:06.674302563 -0600
+++ jikesrvm-3.1.3/rvm/src/org/jikesrvm/VM.java	2013-02-15 00:53:04.992706899 -0600
@@ -1210,6 +1210,33 @@
     swUnlock();
   }
 
+  /* read barrier implementation write operation
+   * Junjie Qian
+   */
+  @NoInline
+  public static void barriersyswriteln(int n, ObjectReference o) {
+    swLock();
+    write(System.currentTimeMillis());
+    write(n);
+    write(o);
+    writeln();
+    swUnlock();
+  } 
+
+
+  /* write barrier implementation write operation
+   * Junjie Qian
+   
+  @NoInline
+  public static void writesyswriteln(ObjectReference o) {
+    swLock();
+    write(System.currentTimeMillis());
+    write(1);
+    write(o);
+    writeln();
+    swUnlock();
+  } */
+
   @NoInline
   public static void sysWriteln(ObjectReference o) {
     swLock();
